"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const debug_1 = __importDefault(require("debug"));
const json5_1 = __importDefault(require("json5"));
const lodash_1 = require("lodash");
const promisified_functions_1 = require("../utils/promisified-functions");
const option_1 = __importDefault(require("./option"));
const option_source_1 = __importDefault(require("./option-source"));
const resolve_path_relatively_cwd_1 = __importDefault(require("../utils/resolve-path-relatively-cwd"));
const render_template_1 = __importDefault(require("../utils/render-template"));
const warning_message_1 = __importDefault(require("../notifications/warning-message"));
const log_1 = __importDefault(require("../cli/log"));
const DEBUG_LOGGER = debug_1.default('testcafe:configuration');
class Configuration {
    constructor(configurationFileName) {
        this._options = {};
        this._filePath = Configuration._resolveFilePath(configurationFileName);
        this._overriddenOptions = [];
    }
    static _fromObj(obj) {
        const result = Object.create(null);
        Object.entries(obj).forEach(([key, value]) => {
            const option = new option_1.default(key, value);
            result[key] = option;
        });
        return result;
    }
    static _showConsoleWarning(message) {
        log_1.default.write(message);
    }
    static _showWarningForError(error, warningTemplate, ...args) {
        const message = render_template_1.default(warningTemplate, ...args);
        Configuration._showConsoleWarning(message);
        DEBUG_LOGGER(message);
        DEBUG_LOGGER(error);
    }
    static _resolveFilePath(path) {
        if (!path)
            return null;
        return path_1.isAbsolute(path) ? path : resolve_path_relatively_cwd_1.default(path);
    }
    async init() {
    }
    mergeOptions(options) {
        Object.entries(options).map(([key, value]) => {
            const option = this._ensureOption(key, value, option_source_1.default.Input);
            if (value === void 0)
                return;
            if (option.value !== value &&
                option.source === option_source_1.default.Configuration)
                this._overriddenOptions.push(key);
            this._setOptionValue(option, value);
        });
    }
    getOption(key) {
        if (!key)
            return void 0;
        const option = this._options[key];
        if (!option)
            return void 0;
        return option.value;
    }
    getOptions() {
        const result = Object.create(null);
        Object.entries(this._options).forEach(([name, option]) => {
            result[name] = option.value;
        });
        return result;
    }
    clone() {
        return lodash_1.cloneDeep(this);
    }
    get filePath() {
        return this._filePath;
    }
    async _load() {
        if (!this.filePath)
            return null;
        if (!await this._isConfigurationFileExists())
            return null;
        const configurationFileContent = await this._readConfigurationFileContent();
        if (!configurationFileContent)
            return null;
        return this._parseConfigurationFileContent(configurationFileContent);
    }
    async _isConfigurationFileExists() {
        try {
            await promisified_functions_1.stat(this.filePath);
            return true;
        }
        catch (error) {
            DEBUG_LOGGER(render_template_1.default(warning_message_1.default.cannotFindConfigurationFile, this.filePath, error.stack));
            return false;
        }
    }
    async _readConfigurationFileContent() {
        try {
            return await promisified_functions_1.readFile(this.filePath);
        }
        catch (error) {
            Configuration._showWarningForError(error, warning_message_1.default.cannotReadConfigFile);
        }
        return null;
    }
    _parseConfigurationFileContent(configurationFileContent) {
        try {
            return json5_1.default.parse(configurationFileContent.toString());
        }
        catch (error) {
            Configuration._showWarningForError(error, warning_message_1.default.cannotParseConfigFile, this._filePath);
        }
        return null;
    }
    _ensureArrayOption(name) {
        const options = this._options[name];
        if (!options)
            return;
        // NOTE: a hack to fix lodash type definitions
        // @ts-ignore
        options.value = lodash_1.castArray(options.value);
    }
    _ensureOption(name, value, source) {
        let option = null;
        if (name in this._options)
            option = this._options[name];
        else {
            option = new option_1.default(name, value, source);
            this._options[name] = option;
        }
        return option;
    }
    _ensureOptionWithValue(name, defaultValue, source) {
        const option = this._ensureOption(name, defaultValue, source);
        if (option.value !== void 0)
            return;
        option.value = defaultValue;
        option.source = source;
    }
    _setOptionValue(option, value) {
        option.value = value;
        option.source = option_source_1.default.Input;
    }
}
exports.default = Configuration;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,